# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""article """
type Article {
  createdDate: Timestamp!
  expirationDate: Timestamp
  id: ID!
  location: Location!
  product: Product!
  quantity: Float!
  started: Boolean
  user: User!
}

type ArticleOrBoolean {
  article: Article
  boolean: Boolean
}

"""category """
type Category {
  color: String
  id: ID!
  name: String!
}

"""content_unit"""
type ContentUnit {
  id: ID!
  name: String!
}

input CreateArticleInput {
  eanProduct: String!
  expirationDate: Timestamp
  idLocation: String!
  idUser: Float!
  quantity: Float!
}

input CreatePersonalProductUserProductSettingsInput {
  categoryIds: String!
  contentUnitId: Float!
  image: String!
  locationId: String!
  name: String!
  productEan: String!
  userId: Float!
}

input CreateUserProductSettingsInput {
  categoryIds: String!
  contentUnitId: Float!
  locationId: String!
  productEan: String!
  userId: Float!
}

input FetchProductsArgs {
  categories: String
  location: String
  skip: Int! = 0
  sortBy: String = "NAME"
  take: Int! = 10
  userId: Float!
  withFoods: Boolean = false
}

"""Location """
type Location {
  id: ID!
  name: String!
}

type Mutation {
  createArticle(createArticleInput: CreateArticleInput!): Article!
  createLocation(id: String!, name: String!): Location!
  createPersonalProductAndPreferences(createPersonalProductUserProductSettingsInput: CreatePersonalProductUserProductSettingsInput!): UserProductSettings!
  createUserProductSettings(createUserProductSettingsInput: CreateUserProductSettingsInput!): UserProductSettings!
  deleteArticle(id: Float!): Boolean!
  switchArticleLocation(switchArticleInput: SwitchArticleInput!): Article!
  updateArticle(updateArticleInput: UpdateArticleInput!): ArticleOrBoolean!
  updateLocation(id: String!, name: String!): Location!
}

"""product """
type Product {
  articles: [Article!]
  brand: String
  ean: ID!
  genericName: String
  imageSmallUrl: String
  imageUrl: String
  ingredients: String
  name: String!
  newlyAdded: Boolean!
  nutriscoreGrade: String
  quantity: String
  user: User!
  userProductSettings: [UserProductSettings!]
}

type Query {
  findAllCategories: [Category!]!
  findAllLocations: [Location!]!
  findAllUnits: [ContentUnit!]!
  findByProductAndUser(ean: String!, idUser: Float!): UserProductSettings!
  findOneProduct(ean: String!): Product!
  findOneUser(id: Float!): User!
  findPersonalProducts(idUser: Float!): [Product!]!
  findProducts(fetchProductsArgs: FetchProductsArgs!): [Product!]!
}

input SwitchArticleInput {
  id: Float!
  idLocation: String!
  quantity: Float!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateArticleInput {
  expirationDate: Timestamp
  id: Float!
  quantity: Float!
}

"""user """
type User {
  favoriteCategories: [Category!]
  firstName: String
  id: ID!
  lastName: String
}

"""userProductSettings"""
type UserProductSettings {
  categories: [Category!]
  contentUnit: ContentUnit!
  id: ID!
  location: Location!
  product: Product!
  user: User!
}